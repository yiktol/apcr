
import base64
import io
import json
import logging
import boto3
import streamlit as st
from PIL import Image
from botocore.config import Config
from botocore.exceptions import ClientError

# Configure logging
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

class ImageError(Exception):
    "Custom exception for errors returned by Amazon Nova Canvas"
    def __init__(self, message):
        self.message = message

def generate_image(model_id, prompt, height=1024, width=1024, cfg_scale=8.0, seed=0, num_images=1):
    """
    Generate an image using Amazon Nova Canvas model.
    
    Args:
        model_id (str): The model ID to use.
        prompt (str): Text prompt for image generation.
        height (int): Height of the generated image.
        width (int): Width of the generated image.
        cfg_scale (float): Configuration scale parameter.
        seed (int): Random seed for reproducibility.
        num_images (int): Number of images to generate.
        
    Returns:
        image_bytes (bytes): The image generated by the model.
    """
    logger.info(f"Generating image with Amazon Nova Canvas model {model_id}")

    bedrock = boto3.client(
        service_name='bedrock-runtime',
        region_name='us-east-1',
        config=Config(read_timeout=300)
    )

    body = json.dumps({
        "taskType": "TEXT_IMAGE",
        "textToImageParams": {
            "text": prompt
        },
        "imageGenerationConfig": {
            "numberOfImages": num_images,
            "height": height,
            "width": width,
            "cfgScale": cfg_scale,
            "seed": seed
        }
    })

    response = bedrock.invoke_model(
        body=body, 
        modelId=model_id, 
        accept="application/json", 
        contentType="application/json"
    )
    
    response_body = json.loads(response.get("body").read())
    
    if "error" in response_body and response_body["error"] is not None:
        raise ImageError(f"Image generation error: {response_body['error']}")
    
    image_results = []
    for base64_image in response_body.get("images", []):
        base64_bytes = base64_image.encode('ascii')
        image_bytes = base64.b64decode(base64_bytes)
        image_results.append(image_bytes)
    
    logger.info(f"Successfully generated {len(image_results)} images")
    return image_results

# Initialize session state
def init_session_state():
    if "history" not in st.session_state:
        st.session_state.history = []
    if "current_image" not in st.session_state:
        st.session_state.current_image = None

# Main application
def main():
    st.set_page_config(
        page_title="Amazon Nova Canvas Image Generator",
        page_icon="üñºÔ∏è",
        layout="wide",
    )
    
    init_session_state()
    
    # Custom CSS for modern styling
    st.markdown("""
    <style>
        .stApp {
            # max-width: 1200px;
            margin: 0 auto;
        }
        .main-header {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1E88E5;
            margin-bottom: 1rem;
        }
        .sub-header {
            font-size: 1.5rem;
            font-weight: 600;
            color: #333;
            margin-top: 2rem;
        }
        .stButton button {
            background-color: #1E88E5;
            color: white;
            border-radius: 8px;
        }
        .stButton button:hover {
            background-color: #1565C0;
        }
        .image-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            background-color: #f9f9f9;
        }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown("<h1 class='main-header'>Amazon Nova Canvas Image Generator</h1>", unsafe_allow_html=True)
    
    st.write("Generate images using Amazon's Nova Canvas AI model")
    
    # Create two columns for inputs and settings
    col1, col2 = st.columns([2, 1])
    
    with col1:
        prompt = st.text_area("Enter your prompt:", 
                             value="A photograph of a cup of coffee from the side.", 
                             height=100,
                             help="Describe the image you want to generate")
    
    with col2:
        model_id = st.selectbox(
            "Select model",
            ["amazon.nova-canvas-v1:0", "amazon.titan-image-generator-v2:0"],
            index=0
        )
        
        st.markdown("<div class='sub-header'>Image Settings</div>", unsafe_allow_html=True)
        
        col_w, col_h = st.columns(2)
        with col_w:
            width = st.select_slider("Width", options=[512, 768, 1024], value=1024)
        with col_h:
            height = st.select_slider("Height", options=[512, 768, 1024], value=1024)
        
        cfg_scale = st.slider("CFG Scale", min_value=1.0, max_value=15.0, value=8.0, step=0.5,
                             help="Controls how closely the image follows the prompt")
        
        advanced_options = st.expander("Advanced Options")
        with advanced_options:
            seed = st.number_input("Seed", value=0, min_value=0, help="Set for reproducible results")
            num_images = st.slider("Number of Images", min_value=1, max_value=4, value=1)
    
    # Generation button
    if st.button("Generate Image", type="primary", use_container_width=True):
        with st.spinner("Generating your image..."):
            try:
                image_bytes_list = generate_image(
                    model_id=model_id,
                    prompt=prompt,
                    height=height,
                    width=width,
                    cfg_scale=cfg_scale,
                    seed=seed,
                    num_images=num_images
                )
                
                # Save current generation to session state
                generation_entry = {
                    "prompt": prompt,
                    "images": image_bytes_list,
                    "settings": {
                        "model": model_id,
                        "width": width,
                        "height": height,
                        "cfg_scale": cfg_scale,
                        "seed": seed
                    }
                }
                
                st.session_state.current_image = generation_entry
                st.session_state.history.append(generation_entry)
                
                st.success(f"Successfully generated {len(image_bytes_list)} image(s)!")
                
            except ClientError as err:
                message = err.response["Error"]["Message"]
                st.error(f"Client error: {message}")
                logger.error(f"Client error: {message}")
            except ImageError as err:
                st.error(err.message)
                logger.error(err.message)
            except Exception as e:
                st.error(f"An unexpected error occurred: {str(e)}")
                logger.exception("Unexpected error")
    
    # Display current generation
    if st.session_state.current_image:
        st.markdown("<div class='sub-header'>Generated Image</div>", unsafe_allow_html=True)
        
        images = st.session_state.current_image["images"]
        if len(images) == 1:
            image = Image.open(io.BytesIO(images[0]))
            st.image(image, caption=st.session_state.current_image["prompt"], use_column_width=True)
        else:
            # Display multiple images in a grid
            cols = st.columns(min(len(images), 2))
            for i, image_bytes in enumerate(images):
                image = Image.open(io.BytesIO(image_bytes))
                cols[i % 2].image(image, caption=f"Image {i+1}", use_column_width=True)
    
    # History section
    if len(st.session_state.history) > 1:  # Only show if there's more than the current image
        st.markdown("<div class='sub-header'>Generation History</div>", unsafe_allow_html=True)
        
        # Display history in reverse order (newest first), excluding the current image
        for i, entry in enumerate(reversed(st.session_state.history[:-1])):
            if i >= 5:  # Limit history display to 5 items
                break
                
            with st.expander(f"Prompt: {entry['prompt'][:50]}...", expanded=False):
                st.write(f"Full prompt: {entry['prompt']}")
                st.write(f"Settings: Width={entry['settings']['width']}, Height={entry['settings']['height']}, CFG={entry['settings']['cfg_scale']}")
                
                if len(entry['images']) == 1:
                    image = Image.open(io.BytesIO(entry['images'][0]))
                    st.image(image, use_column_width=True)
                else:
                    cols = st.columns(min(len(entry['images']), 2))
                    for j, image_bytes in enumerate(entry['images']):
                        image = Image.open(io.BytesIO(image_bytes))
                        cols[j % 2].image(image, caption=f"Image {j+1}", use_column_width=True)
                
                if st.button(f"Use These Settings", key=f"use_settings_{i}"):
                    st.session_state.current_image = entry

if __name__ == "__main__":
    main()
